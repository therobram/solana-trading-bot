services:
  # MongoDB
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-adminpassword}
    networks:
      - trading_bot_network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Mongo Express (UI para MongoDB)
  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD:-adminpassword}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_USER:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_PASSWORD:-adminpassword}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped

  # RPC Service
  rpc-service:
    build: ./rpc_service
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/trading_bot?authSource=admin
    volumes:
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trading_bot_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/rpc/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Token Scanner
  token-scanner:
    build: ./token_scanner
    ports:
      - "8001:8001"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/trading_bot?authSource=admin
    volumes:
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped

  # Trading Engine
  trading-engine:
    build: ./trading_engine
    ports:
      - "8002:8002"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/trading_bot?authSource=admin
    volumes:
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trading_bot_network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build: ./api_gateway
    ports:
      - "8080:8080"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - RPC_SERVICE_URL=http://rpc-service:8000
      - TOKEN_SCANNER_URL=http://token-scanner:8001
      - TRADING_ENGINE_URL=http://trading-engine:8002
    volumes:
      - ./logs:/app/logs
    depends_on:
      - rpc-service
      - token-scanner
      - trading-engine
    networks:
      - trading_bot_network
    restart: unless-stopped

networks:
  trading_bot_network:
    driver: bridge

volumes:
  mongodb_data:
